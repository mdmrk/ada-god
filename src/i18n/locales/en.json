{
  "questions": [
    {
      "title": "Let \\(f(n)\\) be the solution of the recurrence relation \\(f(n) = 2f(\\frac{'{'}n{'}'}{'{'}2{'}'}) + n, \\,f(1) = 1\\)",
      "choices": [
        "\\(f(n)\\in\\Theta(n^{'{'}2{'}'})\\)",
        "\\(f(n)\\in\\Theta(n\\log(n))\\)",
        "\\(f(n)\\in\\Theta(n)\\)"
      ],
      "solution": 1
    },
    {
      "title": "You want to find the shortest path between two cities. To do this you have a table with the distance between pairs of cities where there are roads or a sentinel value (e.g. -1) if there are no roads, so to go from the initial city to the final city you may have to pass through several cities. The geographic coordinates of each city are also known, and thus the geographic distance (in a straight line) between each pair of cities. It is intended to speed up the search for a branching and pruning algorithm by prioritizing the live nodes (cities) that are at the shortest geographical distance from the target city. Select one: ",
      "choices": [
        "The new algorithm will always be faster.",
        "This strategy does not ensure that the shortest path will be obtained",
        "The new algorithm will only be faster for some instances of the problem."
      ],
      "solution": 2
    },
    {
      "title": "Given the following functions, you want to reduce the time complexity of the function \\(g\\) using iterative dynamic programming. What would be the space complexity?<pre><code>// Precondición: {'{'} 0 <= i < v.size(); i < j <= v.size() {'}'}\nunsigned f(const vector<unsigned> &v, unsigned i, unsigned j) {'{'}\n\tif(i == j+1)\n\t\treturn v[i];\n\tunsigned sum = 0;\n\tfor(unsigned k = 0; k < j-i; k++)\n\t\tsum += f(v, i, i+k+1) + f(v, i+k+1, j);\n\treturn sum;\n{'}'}\n\nunsigned g(const vector<unsigned> &v) {'{'}\n\treturn f(v, v.begin(), v.end());\n{'}'}</code></pre>",
      "choices": ["Quadratic", "Exponential", "Cubic"],
      "solution": 0
    },
    {
      "title": "Being an optimization problem, in the list of live branching and pruning nodes...",
      "choices": [
        "Only promising nodes are introduced, that is, nodes that can improve the best solution available at that moment.",
        "There may be nodes that are not promising",
        "The other two options are true"
      ],
      "solution": 2
    },
    {
      "title": "We want to obtain all the permutations of a list composed of \\(n\\) elements, which scheme is the most appropriate?",
      "choices": [
        "Divide and conquer, since the division into sublists could be done in constant time",
        "Branching and pruning, since with good boundary functions it is more efficient for this problem than going back",
        "Going back, for this problem there is no more efficient scheme"
      ],
      "solution": 2
    },
    {
      "title": "When solving the traveling salesman problem by backtracking and assuming a fully connected graph of \\(n\\) vertices, which of these is a good pessimistic bound to start the search?",
      "choices": [
        "The remaining edges are ordered from shortest to greatest distance and the sum of the shortest \\(n\\) edges is calculated",
        "The problem is solved using a greedy algorithm that adds each time to the path the vertex closest to the last added one.",
        "Multiply \\(n\\) by the distance of the shortest edge that remains to be considered"
      ],
      "solution": 1
    },
    {
      "title": "For which of these optimization problems is there a greedy solution?",
      "choices": [
        "The minimum covering tree for an undirected graph with weights.",
        "The problem of the discreet backpack.",
        "The problem of minimum cost assignment of \\(n\\) tasks to \\(n\\) workers when the cost of assigning task \\(i\\) to worker \\(j\\), \\(c_{'{'} ij{'}'}\\) is tabulated in an array."
      ],
      "solution": 0
    },
    {
      "title": "If to solve the same problem we use a branch and pruning algorithm and modify it minimally to turn it into a backtracking algorithm, what do we really change?",
      "choices": [
        "We cause optimistic levels to lose effectiveness",
        "We change the function we give to the pessimistic bound",
        "It would be necessary to check whether the solutions are feasible or not since branching and pruning only generates feasible nodes"
      ],
      "solution": 0
    },
    {
      "title": "What is the main difference between a backtracking solution and a branch and pruning solution for the knapsack problem?",
      "choices": [
        "The order of exploration of the solutions",
        "The fact that the branching and pruning solution can start with a greedy suboptimal solution and the one backtracking does not",
        "The asymptotic cost in the worst case"
      ],
      "solution": 0
    },
    {
      "title": "You want to find the shortest path between two cities. To do this, a table is available with the distance between city pairs in which there are roads, or a sentinel value (for example, -1) if there are none. Therefore, to get from the starting city to the final city, you may have to go through several cities. Furthermore, the geographic coordinates of each city are known and we want to use the geographic distance (in a straight line) between each pair of cities as a bound to limit the search in a backtracking algorithm. What type of height would it be?",
      "choices": [
        "A pessimistic bound",
        "An optimistic bound",
        "It would not be pruning since it is possible that this heuristic does not find a feasible solution."
      ],
      "solution": 1
    },
    {
      "title": "The advantage of the branching and pruning strategy over backtracking is that the former generates possible solutions to the problem by...",
      "choices": [
        "The other two options are true",
        "A guided walk through a priority queue from which the nodes representing the most promising subtrees of the solution space are first extracted.",
        "A tour guided by estimates of the best branches of the tree that represents the solution space"
      ],
      "solution": 0
    },
    {
      "title": "The backtracking strategy is applicable to selection and optimization problems in which:",
      "choices": [
        "The solution space is an infinite set",
        "The solution space is a finite set",
        "The solution space can be either finite or infinite, but in the latter case it must be at least countable."
      ],
      "solution": 1
    },
    {
      "title": "You want to find the shortest path between two cities.\n",
      "choices": [
        "No, since it does not ensure that a feasible solution will be found",
        "No, since in some cases it can give distances less than the optimal one.",
        "Yes, since geographical distance ensures that another better solution is not possible"
      ],
      "solution": 0
    },
    {
      "title": "When we solve a problem we use a branching and pruning scheme...",
      "choices": [
        "Decisions can only be binary",
        "The values ​​between which we choose in each of the decisions can form an infinite set",
        "The values ​​between which we choose in each of the decisions have to form a finite set"
      ],
      "solution": 2
    },
    {
      "title": "When a backtracking algorithm solves a \\(n\\) decision problem, in which there are always at least two options for each decision, which of the following worst-case complexities is the best we can find?",
      "choices": ["\\(2^n\\)", "\\(\\Omicron(n^2)\\)", "\\(\\Omicron(n!)\\)"],
      "solution": 0
    },
    {
      "title": "The worst-case complexity of a branch and pruning algorithm...",
      "choices": [
        "It can be exponential with the number of alternatives for each decision",
        "It is exponential with the number of decisions to make",
        "It can be polynomial with the number of decisions to make"
      ],
      "solution": 1
    },
    {
      "title": "In the absence of optimistic and pessimistic limits, the backtracking strategy...",
      "choices": [
        "Cannot be used to solve optimization problems",
        "Does not traverse the entire tree if there is a way to discard subtrees that represent infeasible solution sets",
        "It must always go through the entire tree"
      ],
      "solution": 1
    },
    {
      "title": "You want to find the shortest path between two cities. ",
      "choices": [
        "It would be a pessimistic estimate as long as we are certain that this approximation finds a feasible solution.",
        "It would be an optimistic estimate as long as there is certainty that this approach finds a feasible solution.",
        "None of the other two options"
      ],
      "solution": 0
    },
    {
      "title": "Decide which of these three does not serve as an optimistic bound to obtain the optimal value of the discrete backpack:",
      "choices": [
        "The discrete backpack value obtained using a greedy algorithm based on the specific value of the objects",
        "The value of the corresponding continuous backpack",
        "The value of a backpack that contains all the objects even if it exceeds the maximum weight allowed"
      ],
      "solution": 0
    },
    {
      "title": "The complexity in the smallest case of a branching and pruning algorithm...",
      "choices": [
        "It is usually polynomial with the number of alternatives for each decision",
        "It is always exponential with the number of decisions to make",
        "It can be polynomial with the number of decisions to make"
      ],
      "solution": 2
    },
    {
      "title": "What are pessimistic limits for branching and pruning?",
      "choices": [
        "To discard nodes based on preference for some other already completed node",
        "To be sure that the optimistic limit is well calculated",
        "To discard nodes based on expected profit"
      ],
      "solution": 2
    },
    {
      "title": "In branching and pruning algorithms, is the value of a pessimistic bound less than the value of an optimistic bound?",
      "choices": [
        "Yes, it's always like this",
        "In general yes, if it is a maximization problem, although sometimes both values ​​can coincide",
        "In general yes, if it is a minimization problem, although sometimes both values ​​can coincide"
      ],
      "solution": 1
    },
    {
      "title": "The branching and pruning strategy needs pessimistic limits...",
      "choices": [
        "To determine the visiting order of nodes in the solution tree",
        "To verify the feasibility of a solution",
        "Only if used to solve optimization problems"
      ],
      "solution": 2
    },
    {
      "title": "In the scheme going back, the pruning mechanisms based on the best solution so far...",
      "choices": [
        "Both statements above are true.",
        "They assure that not all the possible solutions space will be explored",
        "They can eliminate partial solutions that are feasible"
      ],
      "solution": 2
    },
    {
      "title": "Using dimension functions in branching and pruning...",
      "choices": [
        "It ensures that the algorithm will be more efficient in any instance of the problem.",
        "Can decrease the number of problem instances that fall into the worst case",
        "Convert prior exponential complexities to polynomial"
      ],
      "solution": 1
    },
    {
      "title": "Choose which of these three is the tightest pessimistic bound for the optimal value of the discrete backpack:",
      "choices": [
        "The value of the corresponding continuous backpack",
        "The value of a backpack that contains all the objects even if it exceeds the maximum weight allowed",
        "The value of the discrete backpack obtained using a greedy algorithm based on the specific value of the objects"
      ],
      "solution": 2
    },
    {
      "title": "In the branching and pruning strategy...",
      "choices": [
        "Each node has its own optimistic bound, while the pessimistic bound is common for all nodes.",
        "Each node has its own pessimistic bound and also its own optimistic bound.",
        "Each node has its own pessimistic bound, the optimistic bound being common for all nodes."
      ],
      "solution": 1
    },
    {
      "title": "In branching and pruning algorithms...",
      "choices": [
        "An optimistic bound is necessarily an unattainable upper limit; ",
        "An optimistic limit is necessarily an achievable value; ",
        "The use of pessimistic bounds is only effective when there is a possible initial solution."
      ],
      "solution": 0
    },
    {
      "title": "Decide which of these three is the optimistic bound that prunes most efficiently when using the backtracking strategy to solve the knapsack problem:",
      "choices": [
        "The value of a backpack",
        "The optimal value of the corresponding continuous backpack",
        "The value of the discrete backpack obtained using a greedy algorithm based on the specific value of the object"
      ],
      "solution": 1
    },
    {
      "title": "In branching and pruning algorithms, is the value of a pessimistic bound greater than the value of an optimistic bound? ",
      "choices": [
        "No, it's never like that",
        "In general yes, if it is a maximization problem, although sometimes both values can coincide",
        "In general yes, if it is a minimization problem, although sometimes both values can coincide"
      ],
      "solution": 2
    },
    {
      "title": "Given any optimization problem, does the backtracking strategy guarantee the optimal solution?",
      "choices": [
        "It is a necessary condition that the decision domain is discrete or discretizable and that the number of decisions to be made is limited.",
        "Yes, as long as the decision domain is discrete or discretizable and pruning mechanisms based on the best solution so far are used.",
        "Yes, since this method analyzes all the possibilities"
      ],
      "solution": 0
    },
    {
      "title": "The shift assignment problem.\nWe are at the beginning of the course, and students want to find partners to form practice groups. To solve this problem, it is suggested that they select several people and assign them a priority. The number of students is \\(\\Nu\\). There is a square matrix \\(\\Mu\\) with \\(\\Nu\\) rows, where each student has written an integer (between \\(-1\\) and \\(\\Nu-1\\)) in their corresponding row indicating this priority (a value of \\(-1\\) indicates they do not wish or cannot be with the person in the corresponding column. \\(0\\) indicates indifference, and the higher the value, the greater the preference for that person). No student can form a group with themselves.\nThe goal is to find a solution that satisfies the maximum number of students according to their order of preference. Assuming that matrix \\(\\Mu\\) is already created, design an algorithm that solves the problem optimally.",
      "choices": [
        "Optimized through backtracking",
        "Approximate (suboptimal) using greedy algorithm",
        "Both"
      ],
      "solution": 2
    },
    {
      "title": "The execution time of a branch and pruning algorithm depends on",
      "choices": [
        "The problem instance",
        "The function of selecting nodes for expansion",
        "From both"
      ],
      "solution": 2
    },
    {
      "title": "It is an optimization problem, if the decision domain is an infinite set.",
      "choices": [
        "We can apply the backtracking scheme whenever it is a countable infinite set",
        "A greedy strategy may be the only alternative",
        "It is likely that through dynamic programming an efficient algorithm will be obtained to solve it"
      ],
      "solution": 1
    },
    {
      "title": "Backtracking is applicable to selection and optimization problems in which:",
      "choices": [
        "The solution space is a finite set",
        "Anyways",
        "The solution space is an infinite set"
      ],
      "solution": 0
    },
    {
      "title": "Bactracking is a general problem solving technique based on:",
      "choices": [
        "The systematic search for solutions",
        "Direct construction of the solution",
        "None of the above"
      ],
      "solution": 0
    },
    {
      "title": "Greedy algorithm always gives optimal solution:",
      "choices": [
        "To both",
        "To the problem of the backpack without fractionation",
        "To the problem of the backpack with fractionation"
      ],
      "solution": 2
    },
    {
      "title": "Does the backpack problem find its optimal solution using the greedy strategy?:",
      "choices": [
        "Only for the case of the backpack without fractionation",
        "In any of the above cases",
        "Only in the case of the backpack with division"
      ],
      "solution": 2
    },
    {
      "title": "The traveling salesman problem can be solved correctly using these programming schemes:",
      "choices": [
        "Dynamic programming only",
        "Using any of these: Ravenous and backtracking.",
        "Backtracking only"
      ],
      "solution": 2
    },
    {
      "title": "In the greedy method, although the decisions are irreversible, we can ensure that:",
      "choices": [
        "We will always obtain a feasible solution",
        "We will always obtain the optimal solution",
        "We will only obtain the optimal solution for some problems"
      ],
      "solution": 2
    },
    {
      "title": "By applying backtracking we obtain the optimal solution to a problem:",
      "choices": [
        "Always",
        "Only when the problem meets the principle of Optimality",
        "In some cases"
      ],
      "solution": 1
    },
    {
      "title": "Given a problem solved by backtracking and by branching and pruning, the computational cost of the branching and pruning solution, compared to that of backtracking, is:",
      "choices": ["Minor", "Equal", "Elderly"],
      "solution": 1
    },
    {
      "title": "The problem of shift assignment.\nWe are at the beginning of the course, and students want to find partners to form practice groups. To solve this problem, it is suggested that they select several people and assign them a priority. The number of students is \\(\\Nu\\). There is a square matrix \\(\\Mu\\) with \\(\\Nu\\) rows, where each student has written an integer (between \\(-1\\) and \\(\\Nu-1\\)) in their corresponding row indicating this priority (a value of \\(-1\\) indicates they do not wish or cannot be with the person in the corresponding column. \\(0\\) indicates indifference, and the higher the value, the greater the preference for that person). No student can form a group with themselves.\nThe aim is to find a solution to satisfy the maximum number of students according to their order of preference. Assuming that the matrix \\(\\Mu\\) already exists, design an algorithm that solves the problem optimally.",
      "choices": ["Backtracking", "Greedy", "Both"],
      "solution": 0
    },
    {
      "title": "By applying backtracking to problem solving, we obtain algorithms with computational costs:",
      "choices": ["Exponentials", "Polynomials", "Both are correct. "],
      "solution": 0
    },
    {
      "title": "Backtracking is used to solve optimization problems in which the aim is to find:",
      "choices": [
        "The two previous answers are correct",
        "A solution that satisfies some constraints and optimizes a certain objective function",
        "All solutions that satisfy some constraints"
      ],
      "solution": 0
    },
    {
      "title": "The shift allocation problem has a greedy optimal solution by applying the following strategy.\n\nWe are at the beginning of the course, and students want to find partners to form practice groups. To solve this problem, it is suggested that they select several people and assign them a priority. The number of students is \\(\\Nu\\). There is a square matrix \\(\\Mu\\) with \\(\\Nu\\) rows, where each student has written an integer (between \\(-1\\) and \\(\\Nu-1\\)) in their corresponding row indicating this priority (a value of \\(-1\\) indicates they do not wish or cannot be with the person in the corresponding column. \\(0\\) indicates indifference, and the higher the value, the greater the preference for that person). No student can form a group with themselves.\nThe aim is to find a solution to satisfy the maximum number of students according to their order of preference. Assuming that the matrix \\(\\Mu\\) already exists, design an algorithm that solves the problem optimally.",
      "choices": [
        "The problem does not have an optimal solution",
        "We select the students in descending order of preference, respecting the space restrictions of each shift",
        "We select students in ascending order of preference, respecting the space restrictions of each shift"
      ],
      "solution": 0
    },
    {
      "title": "The backpack problem can be solved by using backtracking:",
      "choices": [
        "Only in the case of the backpack with division",
        "Only for the case of the backpack without fractionation",
        "It can be applied for both cases"
      ],
      "solution": 1
    },
    {
      "title": "Given an optimization problem and a greedy algorithm that solves it, when can we be sure that the solution obtained will be optimal?:",
      "choices": [
        "Greedy always finds optimal solution",
        "In both cases",
        "When we formally prove that the criterion leads to an optimal solution for any instance of the problem"
      ],
      "solution": 2
    },
    {
      "title": "The shift assignment problem solved through backtracking has a complexity:\nWe are at the beginning of the course, and students want to find partners to form practice groups. To solve this problem, it is suggested that they select several people and assign them a priority. The number of students is \\(\\Nu\\). There is a square matrix \\(\\Mu\\) with \\(\\Nu\\) rows, where each student has written an integer (between \\(-1\\) and \\(\\Nu-1\\)) in their corresponding row indicating this priority (a value of \\(-1\\) indicates they do not wish or cannot be with the person in the corresponding column. \\(0\\) indicates indifference, and the higher the value, the greater the preference for that person). No student can form a group with themselves.\nThe aim is to find a solution to satisfy the maximum number of students according to their order of preference. Assuming that the matrix \\(\\Mu\\) already exists, design an algorithm that solves the problem optimally.",
      "choices": ["Exponential", "Polynomial", "Neither of the two"],
      "solution": 0
    },
    {
      "title": "Which of the following strategies proceeds to obtain the solution to an optimization problem through backtracking?",
      "choices": [
        "Generate all combinations of the solution and select the one that optimizes the objective function",
        "Generate all feasible solutions and select the one that optimizes the objective function",
        "Generate a feasible solution using an optimal criterion"
      ],
      "solution": 1
    },
    {
      "title": "Given a graph G that represents the towns of the province of Alicante with more than 20,000 inhabitants along with all the connecting roads between them. ",
      "choices": [
        "You may not find a solution even if it exists",
        "A feasible solution",
        "The optimal solution"
      ],
      "solution": 1
    },
    {
      "title": "If we apply a greedy algorithm that does not guarantee us the optimal solution to a problem then...",
      "choices": [
        "If the problem has an optimal solution, the greedy scheme guarantees that it will be found.",
        "We will obtain a feasible solution",
        "You may not find a solution even if it exists"
      ],
      "solution": 2
    }
  ]
}
